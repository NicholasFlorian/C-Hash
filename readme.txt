

* * * * * * * * * * * * * * * * * * * *
*
*	C-Hash & Spell che
*	
* * * * * * * * * * * * * * * * * * * *


For my Hash I handled collisions by moving one index over (even through ‘key’) 
until it found a verified location. It used recursion to keep trying to insert 
itself into a correct spot. Then when verifying it checked the location generated 
by the data against the data being searched to get to the right collision spot, 
also implementing recursion.

I generated keys based on the first few letters of the word and through ascii. 
The Ascii was converted to be case insensitive where a = 0, and z = 25. The key 
was generated based on the sum of all the values. Using just the first few 
letters helped prevent Mod % tablesize issues where the key generated was to 
big and ended up producing an index that was itself.

The hash function is generated by taking the mod of the table size to key 
(tableSize % key), I originally had it the other way around but it was producing 
keys and indexes with the same values which wouldn’t be a proper hash.

**********************

Rough code spec.

In IOHandler

Soften int input will allow:
0 		to be 	0
0<string> 	to be 	0
<string> 	to be 	-1

While not a perfect system it is only designed to select menu items from the user.

